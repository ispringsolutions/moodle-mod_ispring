{"version":3,"file":"api.min.js","sources":["../src/api.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n *\n * @class       mod_ispring/api\n * @copyright   2024 iSpring Solutions Inc.\n * @author      Desktop Team <desktop-team@ispring.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call} from 'core/ajax';\n\nconst INVALID_PLAYER_ID_CODE = 'invalidplayerid';\n\nclass Api {\n    constructor(sessionId, contentId, returnUrl, boxErrorId, iframeId) {\n        this._sessionId = sessionId;\n        this._contentId = contentId;\n        this._returnUrl = returnUrl;\n        this._boxErrorId = boxErrorId;\n        this._iframeId = iframeId;\n    }\n\n    startSession(state) {\n        call([{\n            methodname: 'mod_ispring_start_session',\n            args: {\n                'content_id': this._contentId,\n                'state': JSON.stringify(state)\n            }\n        }])[0]\n            .then((result) => {\n                this._sessionId = result['session_id'];\n            })\n            .catch(() => {\n            });\n    }\n\n    setState(state) {\n        call([{\n            methodname: 'mod_ispring_set_state',\n            args: {\n                'session_id': this._sessionId,\n                'state': JSON.stringify(state)\n            }\n        }])[0]\n            .then((response) => {\n                showErrorBoxIfNeeded(response, this._boxErrorId, this._iframeId);\n            })\n            .catch(() => {\n            });\n    }\n\n    endSession(state) {\n        call([{\n            methodname: 'mod_ispring_end_session',\n            args: {\n                'session_id': this._sessionId,\n                'state': JSON.stringify(state)\n            }\n        }])[0]\n            .then((response) => {\n                showErrorBoxIfNeeded(response, this._boxErrorId, this._iframeId);\n            })\n            .catch(() => {\n            });\n    }\n\n    terminate() {\n        window.location.replace(this._returnUrl);\n    }\n}\n\n/**\n * @param {array} response\n * @param {string} boxId\n * @param {string} iframeId\n */\nfunction showErrorBoxIfNeeded(response, boxId, iframeId) {\n    if ('warning' in response && response['warning'].length > 0)\n    {\n        const warning = response['warning'][0];\n        if (warning['warningcode'] === INVALID_PLAYER_ID_CODE)\n        {\n            document.getElementById(boxId).style.display = 'block';\n            document.getElementById(boxId).innerHTML = warning['message'];\n            document.getElementById(iframeId).parentElement.style.display = 'none';\n        }\n    }\n}\n\n/**\n * @param {string|null} persistStateId\n * @param {string|null} persistState\n */\nfunction setPlayerData(persistStateId, persistState) {\n    if (localStorage && persistStateId) {\n        if (persistState) {\n            localStorage.setItem(persistStateId, persistState);\n        } else {\n            localStorage.removeItem(persistStateId);\n        }\n    }\n}\n\nexport const init = (contentId, playerUrl, iframeId, returnUrl, preloaderId, errorBoxId) => {\n    window['ispring_moodle_connector'] = new Api(0, contentId, returnUrl, errorBoxId, iframeId);\n    call([{\n        methodname: 'mod_ispring_get_player_data',\n        args: {\n            'content_id': contentId\n        }\n    }])[0]\n        .then((result) => {\n            setPlayerData(result['persist_state_id'], result['persist_state']);\n        })\n        .catch(() /*noexcept*/ => {\n        })\n        .then(() => {\n            document.getElementById(iframeId).src = playerUrl;\n            document.getElementById(preloaderId).remove();\n        });\n};"],"names":["Api","constructor","sessionId","contentId","returnUrl","boxErrorId","iframeId","_sessionId","_contentId","_returnUrl","_boxErrorId","_iframeId","startSession","state","methodname","args","this","JSON","stringify","then","result","catch","setState","response","showErrorBoxIfNeeded","endSession","terminate","window","location","replace","boxId","length","warning","document","getElementById","style","display","innerHTML","parentElement","playerUrl","preloaderId","errorBoxId","persistStateId","persistState","localStorage","setItem","removeItem","src","remove"],"mappings":"8JA2BMA,IACFC,YAAYC,UAAWC,UAAWC,UAAWC,WAAYC,eAChDC,WAAaL,eACbM,WAAaL,eACbM,WAAaL,eACbM,YAAcL,gBACdM,UAAYL,SAGrBM,aAAaC,sBACJ,CAAC,CACFC,WAAY,4BACZC,KAAM,YACYC,KAAKR,iBACVS,KAAKC,UAAUL,WAE5B,GACCM,MAAMC,cACEb,WAAaa,OAAM,cAE3BC,OAAM,SAIfC,SAAST,sBACA,CAAC,CACFC,WAAY,wBACZC,KAAM,YACYC,KAAKT,iBACVU,KAAKC,UAAUL,WAE5B,GACCM,MAAMI,WACHC,qBAAqBD,SAAUP,KAAKN,YAAaM,KAAKL,cAEzDU,OAAM,SAIfI,WAAWZ,sBACF,CAAC,CACFC,WAAY,0BACZC,KAAM,YACYC,KAAKT,iBACVU,KAAKC,UAAUL,WAE5B,GACCM,MAAMI,WACHC,qBAAqBD,SAAUP,KAAKN,YAAaM,KAAKL,cAEzDU,OAAM,SAIfK,YACIC,OAAOC,SAASC,QAAQb,KAAKP,sBAS5Be,qBAAqBD,SAAUO,MAAOxB,aACvC,YAAaiB,UAAYA,SAAQ,QAAYQ,OAAS,EAC1D,OACUC,QAAUT,SAAQ,QAAY,GArEb,oBAsEnBS,QAAO,cAEPC,SAASC,eAAeJ,OAAOK,MAAMC,QAAU,QAC/CH,SAASC,eAAeJ,OAAOO,UAAYL,QAAO,QAClDC,SAASC,eAAe5B,UAAUgC,cAAcH,MAAMC,QAAU,uBAmBxD,CAACjC,UAAWoC,UAAWjC,SAAUF,UAAWoC,YAAaC,cACzEd,OAAM,yBAA+B,IAAI3B,IAAI,EAAGG,UAAWC,UAAWqC,WAAYnC,yBAC7E,CAAC,CACFQ,WAAY,8BACZC,KAAM,YACYZ,cAElB,GACCgB,MAAMC,aAlBQsB,eAAgBC,aAAhBD,eAmBGtB,OAAM,iBAnBOuB,aAmBevB,OAAM,cAlBpDwB,cAAgBF,iBACZC,aACAC,aAAaC,QAAQH,eAAgBC,cAErCC,aAAaE,WAAWJ,oBAgB3BrB,OAAM,SAENF,MAAK,KACFc,SAASC,eAAe5B,UAAUyC,IAAMR,UACxCN,SAASC,eAAeM,aAAaQ"}